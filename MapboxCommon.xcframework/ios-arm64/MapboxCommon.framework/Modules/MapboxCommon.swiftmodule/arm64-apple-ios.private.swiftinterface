// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapboxCommon
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
@_exported import MapboxCommon
import Swift
import Turf
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension MapboxCommon.MapboxOptions {
  public static var accessToken: Swift.String {
    get
    set
  }
}
extension MapboxCommon.NSExceptionHandler {
  @discardableResult
  public static func `try`<T>(callback: () throws -> T) throws -> T
}
@_spi(Experimental) @_documentation(visibility: public) public struct GeofenceState {
  @_spi(Experimental) public let feature: Turf.Feature
  @_spi(Experimental) @_documentation(visibility: public) public let timestamp: Foundation.Date?
  @_spi(Experimental) public init(feature: Turf.Feature, timestamp: Foundation.Date?)
}
@_spi(Experimental) @_documentation(visibility: public) public struct GeofencingError : Swift.Error {
  @_spi(Experimental) public let type: MapboxCommon.GeofencingErrorType
  @_spi(Experimental) public let message: Swift.String
}
@_spi(Experimental) @_documentation(visibility: public) public enum GeofencingErrorType : Swift.Int {
  @_spi(Experimental) case notAvailable
  @_spi(Experimental) case defaultRadiusTooLarge
  @_spi(Experimental) case monitoredFeaturesLimitReached
  @_spi(Experimental) case serviceUnavailable
  @_spi(Experimental) case serviceUnauthorized
  @_spi(Experimental) case serviceInaccurate
  @_spi(Experimental) case deviceLocationProviderError
  @_spi(Experimental) case featureAlreadyAdded
  @_spi(Experimental) case featureNotFound
  @_spi(Experimental) case featureInvalid
  @_spi(Experimental) case observerAlreadyAdded
  @_spi(Experimental) case observerNotFound
  @_spi(Experimental) case featureNotStored
  @_spi(Experimental) public init?(rawValue: Swift.Int)
  @_spi(Experimental) public typealias RawValue = Swift.Int
  @_spi(Experimental) public var rawValue: Swift.Int {
    @_spi(Experimental) get
  }
}
@_spi(Experimental) @_documentation(visibility: public) public struct GeofencingEvent {
  @_spi(Experimental) @_documentation(visibility: public) public let feature: Turf.Feature
  @_spi(Experimental) @_documentation(visibility: public) public let timestamp: Foundation.Date
  @_spi(Internal) public init(feature: Turf.Feature, timestamp: Foundation.Date)
}
@_spi(Experimental) @_hasMissingDesignatedInitializers final public class GeofencingFactory {
  @_spi(Experimental) @_documentation(visibility: public) public static func getOrCreate() -> any MapboxCommon.GeofencingService
  @_spi(Experimental) @_documentation(visibility: public) public static func reset()
  @_spi(Experimental) @_documentation(visibility: public) public static func setUserDefined(custom: any MapboxCommon.GeofencingService)
  @_spi(Experimental) @objc deinit
}
@_spi(Experimental) @_documentation(visibility: public) public protocol GeofencingObserver {
  @_spi(Experimental) @_documentation(visibility: public) func onEntry(event: MapboxCommon.GeofencingEvent)
  @_spi(Experimental) @_documentation(visibility: public) func onDwell(event: MapboxCommon.GeofencingEvent)
  @_spi(Experimental) @_documentation(visibility: public) func onExit(event: MapboxCommon.GeofencingEvent)
  @_spi(Experimental) @_documentation(visibility: public) func onError(error: MapboxCommon.GeofencingError)
  @_spi(Experimental) @_documentation(visibility: public) func onUserConsentChanged(isConsentGiven: Swift.Bool)
}
@_spi(Experimental) @_documentation(visibility: public) public struct GeofencingOptions : Swift.Hashable {
  @_spi(Experimental) @_documentation(visibility: public) public var defaultRadius: Swift.UInt32
  @_spi(Experimental) @_documentation(visibility: public) public var maximumMonitoredFeatures: Swift.UInt32
  @_spi(Experimental) public init(defaultRadius: Swift.UInt32 = 300, maximumMonitoredFeatures: Swift.UInt32 = 100000)
  @_spi(Experimental) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Experimental) public static func == (a: MapboxCommon.GeofencingOptions, b: MapboxCommon.GeofencingOptions) -> Swift.Bool
  @_spi(Experimental) public var hashValue: Swift.Int {
    @_spi(Experimental) get
  }
}
@_spi(Experimental) @_documentation(visibility: public) public enum GeofencingPropertiesKeys {
  @_spi(Experimental) @_documentation(visibility: public) public static let dwellTimeKey: Swift.String
}
@_spi(Experimental) @_documentation(visibility: public) public protocol GeofencingService {
  @_spi(Experimental) @_documentation(visibility: public) func configure(options: MapboxCommon.GeofencingOptions, callback: @escaping (Swift.Result<Swift.Void, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func getOptions(callback: @escaping (Swift.Result<MapboxCommon.GeofencingOptions, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func addFeature(feature: Turf.Feature, callback: @escaping (Swift.Result<Swift.String, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func getFeature(identifier: Swift.String, callback: @escaping (Swift.Result<MapboxCommon.GeofenceState, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func removeFeature(identifier: Swift.String, callback: @escaping (Swift.Result<Swift.Void, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func clearFeatures(callback: @escaping (Swift.Result<Swift.UInt32, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func addObserver(observer: any MapboxCommon.GeofencingObserver, callback: @escaping (Swift.Result<Swift.Void, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Experimental) @_documentation(visibility: public) func removeObserver(observer: any MapboxCommon.GeofencingObserver, callback: @escaping (Swift.Result<Swift.Void, MapboxCommon.GeofencingError>) -> Swift.Void)
}
@_spi(Internal) @_hasMissingDesignatedInitializers public class GeofencingUtils {
  @_spi(Internal) public static func setUserConsent(isConsentGiven: Swift.Bool, callback: @escaping (Swift.Result<Swift.Void, MapboxCommon.GeofencingError>) -> Swift.Void)
  @_spi(Internal) public static func getUserConsent() -> Swift.Bool
  @_spi(Internal) public static func isActive() -> Swift.Bool
  @_spi(Internal) @objc deinit
}
extension MapboxCommon.Location {
  convenience public init(coordinate: CoreLocation.CLLocationCoordinate2D, timestamp: Foundation.Date = Date(), altitude: CoreLocation.CLLocationDistance? = nil, horizontalAccuracy: CoreLocation.CLLocationAccuracy? = nil, verticalAccuracy: CoreLocation.CLLocationAccuracy? = nil, speed: CoreLocation.CLLocationSpeed? = nil, speedAccuracy: CoreLocation.CLLocationSpeedAccuracy? = nil, bearing: CoreLocation.CLLocationDirection? = nil, bearingAccuracy: CoreLocation.CLLocationDirectionAccuracy? = nil, floor: Swift.Int? = nil, source: Swift.String? = nil, extra: Any? = nil)
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var timestamp: Foundation.Date {
    get
  }
  public var altitude: CoreLocation.CLLocationDistance? {
    get
  }
  public var horizontalAccuracy: CoreLocation.CLLocationAccuracy? {
    get
  }
  public var verticalAccuracy: CoreLocation.CLLocationAccuracy? {
    get
  }
  public var speed: CoreLocation.CLLocationSpeed? {
    get
  }
  public var speedAccuracy: CoreLocation.CLLocationSpeedAccuracy? {
    get
  }
  public var bearing: CoreLocation.CLLocationDirection? {
    get
  }
  public var bearingAccuracy: CoreLocation.CLLocationDirectionAccuracy? {
    get
  }
  public var floor: Swift.Int? {
    get
  }
}
extension MapboxCommon.HttpRequestError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MapboxCommon.HttpResponse {
  convenience public init(identifier: Swift.UInt64, request: MapboxCommon.HttpRequest, result: Swift.Result<MapboxCommon.HttpResponseData, MapboxCommon.HttpRequestError>)
  public var result: Swift.Result<MapboxCommon.HttpResponseData, MapboxCommon.HttpRequestError> {
    get
  }
}
public struct SettingsServiceError : Swift.Equatable, Swift.Error {
  public init(description: Swift.String)
  public static func == (a: MapboxCommon.SettingsServiceError, b: MapboxCommon.SettingsServiceError) -> Swift.Bool
}
extension MapboxCommon.SettingsServiceError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MapboxCommon.SettingsService {
  public func set<T>(key: Swift.String, value: T) -> Swift.Result<Swift.Void, MapboxCommon.SettingsServiceError>
  public func get<T>(key: Swift.String, type: T.Type) -> Swift.Result<T, MapboxCommon.SettingsServiceError>
  public func get<T>(key: Swift.String, type: T.Type, defaultValue: T) -> Swift.Result<T, MapboxCommon.SettingsServiceError>
  public func erase(key: Swift.String) -> Swift.Result<Swift.Void, MapboxCommon.SettingsServiceError>
  public func has(key: Swift.String) -> Swift.Result<Swift.Bool, MapboxCommon.SettingsServiceError>
}
extension MapboxCommon.SettingsServiceFactory {
  public static func getInstance(storageType: MapboxCommon.SettingsServiceStorageType) -> MapboxCommon.SettingsService
}
@_hasMissingDesignatedInitializers @objc(MBXDataRef) @objcMembers public class DataRef : ObjectiveC.NSObject {
  @objc final public let data: Foundation.Data
  @objc public init(data: Foundation.Data)
  @objc deinit
}
@_spi(Experimental) extension MapboxCommon.GeofencingErrorType : Swift.Equatable {}
@_spi(Experimental) extension MapboxCommon.GeofencingErrorType : Swift.Hashable {}
@_spi(Experimental) extension MapboxCommon.GeofencingErrorType : Swift.RawRepresentable {}
